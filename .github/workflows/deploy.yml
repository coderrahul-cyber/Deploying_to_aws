name: Continuous Integration and Delivery

on:
  push:
    branches: [ "main" ]

env:
  # Define the registry here. Image names will be constructed dynamically in a step.
  REGISTRY: ghcr.io

jobs:
  build:
    name: Build and Push Docker Images
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout main branch
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Generate image names
        run: |
          IMAGE_OWNER=$(echo ${{ github.repository_owner }} | tr '[:upper:]' '[:lower:]')
          echo "WEBSITE_IMAGE_NAME=ghcr.io/${IMAGE_OWNER}/website" >> $GITHUB_ENV
          echo "NGINX_IMAGE_NAME=ghcr.io/${IMAGE_OWNER}/nginx" >> $GITHUB_ENV

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # Step 1: Build and push the WEBSITE image üëç
      - name: Build and push website image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile  # Correct path for the website service
          push: true
          tags: ${{ env.WEBSITE_IMAGE_NAME }}:latest

      # Step 2: Build and push the NGINX image üëç
      - name: Build and push nginx image
        uses: docker/build-push-action@v5
        with:
          context: ./nginx # The context is the nginx directory
          file: ./nginx/Dockerfile # Correct path for the nginx service
          push: true
          tags: ${{ env.NGINX_IMAGE_NAME }}:latest
  deploy:
    name: Deploy to AWS EC2
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Checkout main branch
        uses: actions/checkout@v4

      # Step 1: Copy docker-compose.prod.yml to the server
      - name: Copy file via scp
        uses: appleboy/scp-action@v0.1.4
        with:
          host: ${{ secrets.AWS_EC2_IP_ADDRESS }}
          username: ${{ secrets.AWS_HOST_USER }}
          key: ${{ secrets.PRIVATE_KEY }}
          port: 22
          source: "docker-compose.prod.yml"
          target: "~/"

      # Step 2: Run deployment commands on the server
      - name: Deploy via ssh
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.AWS_EC2_IP_ADDRESS }}
          username: ${{ secrets.AWS_HOST_USER }}
          key: ${{ secrets.PRIVATE_KEY }}
          port: 22
          script: |
            echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin
            docker-compose -f docker-compose.prod.yml pull
            docker-compose -f docker-compose.prod.yml up -d --remove-orphans
            docker logout
            docker image prune -af