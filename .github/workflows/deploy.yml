# This is the name of the workflow that will appear in the "Actions" tab.
name: Continuous Integration and Delivery

# This section defines the trigger for the workflow.
on:
  # The workflow runs on any push event...
  push:
    # ...but only to the "main" branch.
    branches: [ "main" ]

# Top-level environment variables available to all jobs.
env:
  REGISTRY: ghcr.io

# This section defines all the jobs for the workflow.
jobs:
  # The first job is responsible for building the Docker images.
  build:
    name: Build and Push Docker Images
    runs-on: ubuntu-latest
    # Permissions are crucial for the GITHUB_TOKEN used in this job.
    permissions:
      contents: read       # Allows checking out the repository code.
      packages: write      # Allows pushing images to the GitHub Container Registry.

    steps:
      - name: Checkout main branch
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Generate image names
        run: |
          # Creates dynamic, lowercase image names based on the repository owner.
          IMAGE_OWNER=$(echo ${{ github.repository_owner }} | tr '[:upper:]' '[:lower:]')
          echo "WEBSITE_IMAGE_NAME=ghcr.io/${IMAGE_OWNER}/website" >> $GITHUB_ENV
          echo "NGINX_IMAGE_NAME=ghcr.io/${IMAGE_OWNER}/nginx" >> $GITHUB_ENV

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }} # Uses the secure, built-in token.

      - name: Build and push website image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ env.WEBSITE_IMAGE_NAME }}:latest

      - name: Build and push nginx image
        uses: docker/build-push-action@v5
        with:
          context: ./nginx
          file: ./nginx/Dockerfile
          push: true
          tags: ${{ env.NGINX_IMAGE_NAME }}:latest

  # The second job handles deploying the images to your EC2 server.
  deploy:
    name: Deploy to AWS EC2
    runs-on: ubuntu-latest
    # 'needs: build' ensures this job only runs if the 'build' job succeeds.
    needs: build

    steps:
      - name: Checkout main branch
        uses: actions/checkout@v4

      - name: Copy docker-compose file to server
        uses: appleboy/scp-action@v0.1.4
        with:
          host: ${{ secrets.AWS_EC2_IP_ADDRESS }}
          username: ${{ secrets.AWS_HOST_USER }}
          key: ${{ secrets.PRIVATE_KEY }}
          port: 22
          source: "docker-compose.prod.yml"
          target: "~/"

      - name: Deploy application via SSH
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.AWS_EC2_IP_ADDRESS }}
          username: ${{ secrets.AWS_HOST_USER }}
          key: ${{ secrets.PRIVATE_KEY }}
          port: 22
          script: |
            # Create the .env file on the server to provide image names to Docker Compose.
            echo "NEXT_APP_WEBSITE_IMAGE=ghcr.io/${{ github.repository_owner }}/website:latest" > .env
            echo "NEXT_APP_NGINX_IMAGE=ghcr.io/${{ github.repository_owner }}/nginx:latest" >> .env
            
            # Use the powerful Personal Access Token (PAT) for the most reliable login.
            echo "${{ secrets.GHCR_PAT }}" | docker login ghcr.io -u ${{ github.repository_owner }} --password-stdin
            
            # Use 'sudo docker compose' (with a space) for all commands.
            # Pull the latest images specified in the compose file.
            sudo docker compose -f docker-compose.prod.yml pull
            
            # Stop old containers and start new ones from the new images.
            sudo docker compose -f docker-compose.prod.yml up -d --remove-orphans
            
            # Log out for security.
            sudo docker logout
            
            # Clean up old, unused Docker images to save disk space.
            sudo docker image prune -af