name: Continuous Integration and Delivery

on:
  push:
    branches: [ "main" ]

env:
  # Define the registry here. Image names will be constructed dynamically in a step.
  REGISTRY: ghcr.io

jobs:
  build:
    name: Build and Push Docker Images
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout main branch
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Generate image names
        run: |
          IMAGE_OWNER=$(echo ${{ github.repository_owner }} | tr '[:upper:]' '[:lower:]')
          echo "WEBSITE_IMAGE_NAME=ghcr.io/${IMAGE_OWNER}/website" >> $GITHUB_ENV
          echo "NGINX_IMAGE_NAME=ghcr.io/${IMAGE_OWNER}/nginx" >> $GITHUB_ENV

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # Step 1: Build and push the WEBSITE image 👍
      - name: Build and push website image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile  # Correct path for the website service
          push: true
          tags: ${{ env.WEBSITE_IMAGE_NAME }}:latest

      # Step 2: Build and push the NGINX image 👍
      - name: Build and push nginx image
        uses: docker/build-push-action@v5
        with:
          context: ./nginx # The context is the nginx directory
          file: ./nginx/Dockerfile # Correct path for the nginx service
          push: true
          tags: ${{ env.NGINX_IMAGE_NAME }}:latest
  deploy:
    name: Deploy to AWS EC2
    runs-on: ubuntu-latest
    needs: build # This ensures the build job must succeed first

    steps:
      - name : Checkout main branch
        uses : actions/checkout@v4

      - name: Add SSH key to the agent
        env:
          SSH_AUTH_SOCK: /tmp/ssh_agent.sock
        run: |
          # This sets up an SSH agent in the runner to securely handle the private key
          ssh-agent -a $SSH_AUTH_SOCK > /dev/null
          ssh-add - <<< "${{ secrets.PRIVATE_KEY }}"

      - name: Deploy to EC2
        run: |
          # Copy your production docker-compose file to the EC2 server
          scp -o StrictHostKeyChecking=no ./docker-compose.prod.yml ${{ secrets.AWS_HOST_USER }}@${{ secrets.AWS_EC2_IP_ADDRESS }}:~/

          # SSH into the server and run the deployment commands
          # The '<< EOF' syntax allows you to send a multi-line script to the remote machine
          ssh -o StrictHostKeyChecking=no ${{ secrets.AWS_HOST_USER }}@${{ secrets.AWS_EC2_IP_ADDRESS }} << EOF
            # Login to the GitHub Container Registry on the remote server
            # Use the automatically generated GITHUB_TOKEN for secure authentication
            echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin

            # Use docker-compose to pull the latest images defined in your .yml file
            # This is more efficient than pulling each image individually
            docker-compose -f docker-compose.prod.yml pull

            # Stop and remove old containers, then start new ones from the pulled images
            docker-compose -f docker-compose.prod.yml up -d --remove-orphans

            # Log out from the registry
            docker logout

            # Clean up old, unused Docker images to save space
            docker image prune -af
          EOF